import streamlit as st
import requests  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from voice_recorder import start_recording, stop_recording, process_inputVoise
from text_editor import process_text, get_oauth_token
import pyttsx3
import threading
from typing import Dict, List
import time
import subprocess

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API GigaChat
GIGACHAT_API_KEY = 'MWI4YmEzOTAtYTQwMS00OGM5LTk3ODYtNDFlNjg1MTg1NTIzOmJkNDg3OTQ2LTQ3NTctNGYwNS1iMjg5LTVhNzIyYTVjOTc0NQ=='


def fetch_vacancies():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π."""
    try:
        response = requests.get("http://localhost:8000/vacancies/")
        if response.status_code == 200:
            return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {response.status_code}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []


def main():
    st.set_page_config(page_title="HR-–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", layout="wide")


    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–µ–∂–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
    st.markdown(
        """
        <style>
        @import url('@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css');

        /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
        body {
            font-family: 'Montserrat', sans-serif;
            background-color: #F5F0FA; /* –°—É–ø–µ—Ä —Å–≤–µ—Ç–ª—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ */
            color: #5A5A5A;
        }
        h1, h2, h3 {
            font-family: 'Montserrat', serif;
            color: #7A6F8B; /* –¢—ë–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
        }
        .stButton>button {
            background-color: #A8A4CE !important;
            color: white !important;
            border: none !important;
            border-radius: 25px !important;
            padding: 10px 20px !important;
            font-size: 16px !important;
            font-weight: bold !important;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .stButton>button:hover {
            transform: scale(1.03);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .stTextInput>div>div>input {
            border-radius: 10px !important;
            border: 1px solid #D8B5D8 !important;
            padding: 10px !important;
        }
        .stTextArea>div>div>textarea {
            border-radius: 10px !important;
            border: 1px solid #D8B5D8 !important;
            padding: 10px !important;
        }
        .stSidebar {
            background-color: #7A6F8B !important; /* –¢—ë–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é */
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.05) !important;
            padding: 20px !important;
        }
        .stSidebar h1, .stSidebar h2, .stSidebar h3 {
            color: #FFFFFF !important; /* –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é */
        }
        .stSidebar .stMarkdown {
            color: #FFFFFF !important; /* –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é */
        }
        .stExpander {
            border: 1px solid #E0D7E9 !important;
            border-radius: 10px !important;
            margin-bottom: 10px !important;
        }
        .stExpander .stMarkdown {
            color: #7A6F8B !important; /* –¢—ë–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –±–ª–æ–∫–æ–≤ */
        }
        .empty-list {
            color: #A8A4CE;
            font-style: italic;
        }
        .gradient-hr {
            border: 0;
            height: 1px;
            background: #E0D7E9;
            margin: 20px 0;
        }
        .card {
            background-color: #FFFFFF;
            border-radius: 15px;
            padding: 20px;
            margin: 10px 0;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        }
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ */
        .stRadio>div>label>div>div {
            color: #7A6F8B !important;
        }
        /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ */
        .stMarkdown {
            color: #7A6F8B !important; /* –¢—ë–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ */
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ */
        .microphone-icon {
            font-size: 20px;
            color: white;
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏ –ø–ª—é—Å–∏–∫–∞ */
        .plus-icon {
            font-size: 20px;
            color: white;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
    for key, default in {
        "chat_history": [],
        "user_input": "",
        "temp_input": "",  # –ù–æ–≤–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
        "chat_active": False,
        "show_create_form": False,
        "selected_vacancy": None,
        "vacancies": [],
        "recording": False,
        "vacancies_loaded": False,
        "audio_file": None
    }.items():
        if key not in st.session_state:
            st.session_state[key] = default

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not st.session_state["vacancies_loaded"]:
        st.session_state["vacancies"] = fetch_vacancies()
        st.session_state["vacancies_loaded"] = True
    if 'input_processed' not in st.session_state:
        st.session_state.input_processed = False

    with st.sidebar:
        st.markdown("<h1 style='text-align: center; color: #FFFFFF;'>HR-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</h1>", unsafe_allow_html=True)
        st.markdown("<div class='gradient-hr'></div>", unsafe_allow_html=True)

        st.markdown("<h2 style='color: #FFFFFF;'>–í–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫</h2>", unsafe_allow_html=True)

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω
        text_input_col, mic_col = st.columns([0.9, 0.1])
        with text_input_col:
            if not st.session_state.get("recording", False):
                user_input = st.text_input(
                    "",
                    placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...",
                    label_visibility="collapsed",
                    key="user_input",
                    value=st.session_state.get("temp_input", ""),
                    on_change=handle_enter
                )
                st.session_state.temp_input = ""  # –°–±—Ä–æ—Å –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            else:
                st.markdown("<p style='color: #FFFFFF; font-weight: bold;'>üî¥ –°–ª—É—à–∞—é –í–∞—Å! –ì–æ–≤–æ—Ä–∏—Ç–µ...</p>",
                            unsafe_allow_html=True)

        with mic_col:
            if not st.session_state.get("recording", False):
                if st.button("üé§", key="mic_button"):
                    start_recording()
                    st.session_state["recording"] = True
                    st.rerun()
            else:
                if st.button("‚èπ", key="stop_mic_button"):
                    st.session_state["recording"] = False
                    st.rerun()
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if st.session_state.get("recording", False):
            if st.button("–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", key="send_audio_button"):
                stop_recording()
                process_inputVoise()
                st.session_state["recording"] = False
                st.rerun()
        else:
            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", key="send_button"):
                process_text_input()

        # –ë–ª–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π (–æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        st.write("")
        col1, col2 = st.columns([0.9, 0.1])
        with col1:
            st.markdown("<h2 style='color: #FFFFFF;'>–°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π</h2>", unsafe_allow_html=True)
        with col2:
            if st.button("‚ûï", key="add_vacancy_sidebar"):
                st.session_state["show_create_form"] = True

        if not st.session_state["vacancies"]:
            st.markdown("<p class='empty-list'>–¢—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ...</p>", unsafe_allow_html=True)
        else:
            for vacancy in st.session_state["vacancies"]:
                if all(k in vacancy for k in ["direction", "skills", "tasks"]):
                    button_text = f"## {vacancy['direction']}\n\n–ù–∞–≤—ã–∫–∏: {vacancy['skills']}"
                    if st.button(button_text, key=f"vacancy_{vacancy['id']}", use_container_width=True):
                        st.session_state["selected_vacancy"] = vacancy

    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if st.session_state["show_create_form"]:
        create_vacancy()
    elif st.session_state["selected_vacancy"]:
        show_vacancy_details(st.session_state["selected_vacancy"])
    elif st.session_state["chat_active"]:
        show_chat()
    else:
        st.markdown("""
            ## –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å?
            1. **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é** –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞
            2. **–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é**, –Ω–∞–∂–∞–≤ –Ω–∞ "+"
            3. **–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å** —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏–ª–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω
            """)


def create_vacancy():
    st.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏")

    # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –ø–æ–ª—è "–û–ø—ã—Ç")
    direction = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏*", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    skills = st.text_area("–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏*", placeholder="–û–ø–∏—à–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏")
    tasks = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á*", placeholder="–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")

    # –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"
    if st.button("–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", key="create_vac"):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if not direction.strip():
            st.warning("–ü–æ–ª–µ '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
        elif not skills.strip():
            st.warning("–ü–æ–ª–µ '–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
        elif not tasks.strip():
            st.warning("–ü–æ–ª–µ '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞
            new_vacancy = {
                "direction": direction,
                "skills": skills,
                "tasks": tasks
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            try:
                response = requests.post(
                    "http://localhost:8000/vacancies/",
                    json=new_vacancy,
                    headers={"Content-Type": "application/json"}
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
                if response.status_code == 200:  # 201 - Created
                    st.success("–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
                    st.session_state["vacancies"] = fetch_vacancies()
                    st.session_state["show_create_form"] = False
                    st.rerun()
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {response.status_code}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")

    if st.button("‚Üê –ù–∞–∑–∞–¥", key="back_to_main"):
        st.session_state["show_create_form"] = False
        st.rerun()

#
# def show_vacancy_details(vacancy):
#     st.subheader(f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy['direction']}")
#     st.write(f"**–ù–∞–≤—ã–∫–∏:** {vacancy['skills']}")
#     st.write(f"**–ó–∞–¥–∞—á–∏:** {vacancy['tasks']}")
#
#     # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏
#     st.subheader("–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã")
#     resumes = search_resumes(vacancy)
#
#     if not resumes:
#         st.markdown("<p class='empty-list'>–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>", unsafe_allow_html=True)
#     else:
#         # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ
#         for resume_data in resumes:
#             resume = resume_data["resume"]
#             similarity = resume_data["similarity"]
#
#             with st.expander(f"{resume['full_name']} - –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {similarity * 100:.2f}%"):
#                 st.write(f"**–ù–∞–≤—ã–∫–∏:** {resume['skills']}")
#                 st.write(f"**–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:** {resume['experience']}")
#
#                 col1, col2 = st.columns([1, 2])
#                 with col1:
#                     with open(resume["pdf_filename"], "rb") as pdf_file:
#                         pdf_bytes = pdf_file.read()
#                         st.download_button(
#                             label="üìÑ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—é–º–µ",
#                             data=pdf_bytes,
#                             file_name=resume["pdf_filename"].split("/")[-1],
#                             mime="application/pdf"
#                         )
#                 with col2:
#                     if st.button("–ó–∞–∫—Ä—ã—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é —Å —ç—Ç–∏–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º",
#                                  key=f"close_with_{resume['id']}"):
#                         # –õ–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º
#                         st.session_state["vacancies"] = [
#                             v for v in st.session_state["vacancies"]
#                             if v["id"] != vacancy["id"]
#                         ]
#                         st.session_state["selected_vacancy"] = None
#                         st.rerun()
#
#     # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
#     if st.button("‚Üê –ù–∞–∑–∞–¥", key="back_to_main"):
#         st.session_state["selected_vacancy"] = None
#         st.rerun()

class VoiceAnnouncer:
    def __init__(self):
        self.lock = threading.Lock()
        self.engine = None
        self.russian_voice = None
        self.english_voice = None
        self._init_voices()

    def _init_voices(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pyttsx3 –≥–æ–ª–æ—Å–æ–≤
            self.engine = pyttsx3.init()
            voices = self.engine.getProperty('voices')

            for voice in voices:
                if not self.russian_voice and ('ru' in voice.languages or 'russian' in voice.name.lower()):
                    self.russian_voice = voice.id
                if not self.english_voice and ('en' in voice.languages or 'english' in voice.name.lower()):
                    self.english_voice = voice.id

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤ (–¥–ª—è macOS/Linux)
            try:
                result = subprocess.run(['say', '-v', '?'], capture_output=True, text=True)
                if 'ru_' in result.stdout or 'russian' in result.stdout.lower():
                    self.russian_voice = 'system'
            except:
                pass

        except Exception as e:
            print(f"Voice initialization error: {e}")

    def _speak_with_pyttsx3(self, text: str) -> bool:
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ pyttsx3"""
        if not self.engine:
            return False

        try:
            with self.lock:
                # –ü—Ä–æ–±—É–µ–º —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å, –ø–æ—Ç–æ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
                if self.russian_voice:
                    self.engine.setProperty('voice', self.russian_voice)
                elif self.english_voice:
                    self.engine.setProperty('voice', self.english_voice)

                self.engine.say(text)
                self.engine.runAndWait()
                return True
        except RuntimeError as e:
            print(f"Pyttsx3 runtime error: {e}")
            self.engine = None
            return False
        except Exception as e:
            print(f"Pyttsx3 error: {e}")
            return False

    def _speak_with_system(self, text: str) -> bool:
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å, –ø–æ—Ç–æ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
            voices_to_try = []
            if self.russian_voice == 'system':
                voices_to_try.extend(['ru_RU', 'russian', 'Yuri'])
            voices_to_try.extend(['en_US', 'english', 'Alex'])

            for voice in voices_to_try:
                try:
                    subprocess.run(['say', '-v', voice, text], check=True)
                    return True
                except subprocess.CalledProcessError:
                    continue

            return False
        except Exception as e:
            print(f"System TTS error: {e}")
            return False

    def speak(self, text: str) -> bool:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º pyttsx3
        if self._speak_with_pyttsx3(text):
            return True

        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Å–ø–æ—Å–æ–±
        if self._speak_with_system(text):
            return True

        print(f"All TTS methods failed for: {text}")
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
announcer = VoiceAnnouncer()


def announce_results(resumes: List[Dict]):
    """–û–∑–≤—É—á–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
    if not resumes:
        announcer.speak("No suitable candidates found")
        return

    count = len(resumes)
    announcer.speak(f"Found {count} candidates")

    time.sleep(0.5)

    for i, resume in enumerate(resumes, 1):
        name = resume['resume'].get('full_name', 'Unnamed candidate')
        similarity = round(resume['similarity'] * 100)
        text = f"Candidate {i}: {name}. Match: {similarity} percent"
        if not announcer.speak(text):
            print(f"Failed to announce: {text}")
        time.sleep(0.3)


def show_vacancy_details(vacancy):
    st.subheader(f"Vacancy: {vacancy['direction']}")
    st.write(f"**Skills:** {vacancy['skills']}")
    st.write(f"**Tasks:** {vacancy['tasks']}")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏
    st.subheader("Suitable candidates")
    resumes = search_resumes(vacancy)

    # –ö–Ω–æ–ø–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    if st.button("üîä Announce results", key="speak_results"):
        threading.Thread(
            target=announce_results,
            args=(resumes,),
            daemon=True
        ).start()

    # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è...
    if not resumes:
        st.markdown("<p class='empty-list'>No suitable resumes found.</p>", unsafe_allow_html=True)
    else:
        for resume_data in resumes:
            resume = resume_data["resume"]
            similarity = resume_data["similarity"]

            with st.expander(f"{resume['full_name']} - Match: {similarity * 100:.2f}%"):
                st.write(f"**Skills:** {resume['skills']}")
                st.write(f"**Experience:** {resume['experience']}")

                col1, col2 = st.columns([1, 2])
                with col1:
                    with open(resume["pdf_filename"], "rb") as pdf_file:
                        pdf_bytes = pdf_file.read()
                        st.download_button(
                            label="üìÑ Download resume",
                            data=pdf_bytes,
                            file_name=resume["pdf_filename"].split("/")[-1],
                            mime="application/pdf"
                        )
                with col2:
                    if st.button("Hire this candidate",
                                 key=f"close_with_{resume['id']}"):
                        st.session_state["vacancies"] = [
                            v for v in st.session_state["vacancies"]
                            if v["id"] != vacancy["id"]
                        ]
                        st.session_state["selected_vacancy"] = None
                        st.rerun()

    if st.button("‚Üê Back", key="back_to_main"):
        st.session_state["selected_vacancy"] = None
        st.rerun()


# –ü—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

def search_resumes(vacancy):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∑—é–º–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏."""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        search_data = {
            "direction": vacancy["direction"],
            "skills": vacancy["skills"],
            "tasks": vacancy["tasks"]
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
        response = requests.post(
            "http://localhost:8000/search_resumes/",
            json=search_data,
            headers={"Content-Type": "application/json"}
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code == 200:
            return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–∑—é–º–µ: {response.status_code}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []


def handle_enter():
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Enter –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ"""
    if st.session_state.get("user_input", ""):
        process_text_input()



def process_text_input():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞"""
    current_input = st.session_state.user_input

    if not current_input:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    token = get_oauth_token(GIGACHAT_API_KEY)
    processed_text = process_text(current_input, token)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∑–∞–ø—Ä–æ—Å–∞
    search_query = {
        "id": -1,  # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
        "direction": "–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞",
        "skills": current_input,
        "tasks": "",
        "experience": "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
    }

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if isinstance(processed_text, dict):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ–ø–∏—Å–∞–Ω–∏–µ
        search_query["tasks"] = processed_text.get('corrected_text', current_input)

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞
        if 'corrected_keys' in processed_text:
            corrected = processed_text['corrected_keys']
            if corrected.get('direction'):
                search_query["direction"] = ', '.join([d for d in corrected['direction'] if d != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'])
            if corrected.get('skills'):
                search_query["skills"] = ', '.join([s for s in corrected['skills'] if s != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'])
            if corrected.get('experience'):
                search_query["experience"] = ', '.join([e for e in corrected['experience'] if e != '–ù–µ —É–∫–∞–∑–∞–Ω–æ'])
    else:
        search_query["tasks"] = str(processed_text)

    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    search_query = {k: v if v else "–ù–µ —É–∫–∞–∑–∞–Ω–æ" for k, v in search_query.items()}

    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
    st.session_state.selected_vacancy = search_query
    st.session_state.chat_active = False
    # st.session_state.user_input = ""  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    st.rerun()  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å

def show_chat():
    for message in st.session_state["chat_history"]:
        st.markdown(message)


def clear_main_view():
    st.session_state.update({"chat_active": False, "show_create_form": False, "selected_vacancy": None})


if __name__ == "__main__":
    main()