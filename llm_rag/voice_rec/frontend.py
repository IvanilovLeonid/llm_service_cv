import streamlit as st
import requests  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
from voice_recorder import start_recording, stop_recording, process_inputVoise
from text_editor import process_text, get_oauth_token

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API GigaChat
GIGACHAT_API_KEY = 'NWMwOWI4ZGItYTY0OS00NjIwLWFjYzgtMjk2ZWY3ZTU0ZTcyOmY4YTNjNGRlLWE1MTEtNGJjMi05NTE5LTJmY2E1MWNhN2FlZQ=='


def fetch_vacancies():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π."""
    try:
        response = requests.get("http://localhost:8000/vacancies/")
        if response.status_code == 200:
            return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º JSON —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–π: {response.status_code}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []


def main():
    st.set_page_config(page_title="HR-–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç", layout="wide")

    # –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –Ω–µ–∂–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
    st.markdown(
        """
        <style>
        @import url('@import url('https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700&display=swap');');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css');

        /* –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∏–ª–∏ */
        body {
            font-family: 'Montserrat', sans-serif;
            background-color: #F5F0FA; /* –°—É–ø–µ—Ä —Å–≤–µ—Ç–ª—ã–π —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω –¥–ª—è –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ */
            color: #5A5A5A;
        }
        h1, h2, h3 {
            font-family: 'Montserrat', serif;
            color: #7A6F8B; /* –¢—ë–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */
        }
        .stButton>button {
            background-color: #A8A4CE !important;
            color: white !important;
            border: none !important;
            border-radius: 25px !important;
            padding: 10px 20px !important;
            font-size: 16px !important;
            font-weight: bold !important;
            transition: transform 0.2s ease, box-shadow 0.2s ease;
        }
        .stButton>button:hover {
            transform: scale(1.03);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        .stTextInput>div>div>input {
            border-radius: 10px !important;
            border: 1px solid #D8B5D8 !important;
            padding: 10px !important;
        }
        .stTextArea>div>div>textarea {
            border-radius: 10px !important;
            border: 1px solid #D8B5D8 !important;
            padding: 10px !important;
        }
        .stSidebar {
            background-color: #7A6F8B !important; /* –¢—ë–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ñ–æ–Ω –¥–ª—è –±–æ–∫–æ–≤–æ–≥–æ –º–µ–Ω—é */
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.05) !important;
            padding: 20px !important;
        }
        .stSidebar h1, .stSidebar h2, .stSidebar h3 {
            color: #FFFFFF !important; /* –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é */
        }
        .stSidebar .stMarkdown {
            color: #FFFFFF !important; /* –ë–µ–ª—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é */
        }
        .stExpander {
            border: 1px solid #E0D7E9 !important;
            border-radius: 10px !important;
            margin-bottom: 10px !important;
        }
        .stExpander .stMarkdown {
            color: #7A6F8B !important; /* –¢—ë–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è –±–ª–æ–∫–æ–≤ */
        }
        .empty-list {
            color: #A8A4CE;
            font-style: italic;
        }
        .gradient-hr {
            border: 0;
            height: 1px;
            background: #E0D7E9;
            margin: 20px 0;
        }
        .card {
            background-color: #FFFFFF;
            border-radius: 15px;
            padding: 20px;
            margin: 10px 0;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        .card:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
        }
        .fade-in {
            animation: fadeIn 0.5s ease-in;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ */
        .stRadio>div>label>div>div {
            color: #7A6F8B !important;
        }
        /* –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–∞–≤–æ–π —Å—Ç–æ—Ä–æ–Ω–µ */
        .stMarkdown {
            color: #7A6F8B !important; /* –¢—ë–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ */
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ */
        .microphone-icon {
            font-size: 20px;
            color: white;
        }
        /* –°—Ç–∏–ª–∏ –¥–ª—è –∏–∫–æ–Ω–∫–∏ –ø–ª—é—Å–∏–∫–∞ */
        .plus-icon {
            font-size: 20px;
            color: white;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
    for key, default in {
        "chat_history": [],
        "user_input": "",
        "chat_active": False,
        "show_create_form": False,
        "selected_vacancy": None,
        "vacancies": [],
        "recording": False,
        "vacancies_loaded": False  # –§–ª–∞–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π
    }.items():
        if key not in st.session_state:
            st.session_state[key] = default

    # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    if not st.session_state["vacancies_loaded"]:
        st.session_state["vacancies"] = fetch_vacancies()
        st.session_state["vacancies_loaded"] = True

    with st.sidebar:
        # –ë–æ–ª—å—à–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —ç–π—á–∞—Ä"
        st.markdown("<h1 style='text-align: center; color: #FFFFFF;'>HR-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç</h1>", unsafe_allow_html=True)
        st.markdown("<div class='gradient-hr'></div>", unsafe_allow_html=True)

        st.markdown("<h2 style='color: #FFFFFF;'>–í–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫</h2>", unsafe_allow_html=True)
        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω
        text_input_col, mic_col = st.columns([0.9, 0.1])
        with text_input_col:
            if not st.session_state.get("recording", False):
                user_input = st.text_input("", placeholder="–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å...", label_visibility="collapsed",
                                           key="user_input", on_change=handle_enter)
            else:
                st.markdown("<p style='color: #FFFFFF; font-weight: bold;'>üî¥ –°–ª—É—à–∞—é –í–∞—Å! –ì–æ–≤–æ—Ä–∏—Ç–µ...</p>",
                            unsafe_allow_html=True)

        with mic_col:
            if not st.session_state.get("recording", False):
                if st.button("üé§", key="mic_button"):
                    start_recording()
                    st.session_state["recording"] = True
                    st.rerun()
            else:
                if st.button("   ‚èπ   ", key="stop_mic_button"):
                    stop_recording()
                    st.session_state["recording"] = False
                    st.rerun()

        if st.session_state.get("recording", False):
            if st.button("–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", key="send_audio_button"):
                stop_recording()
                process_inputVoise()
                st.session_state["recording"] = False
                st.rerun()
        else:
            if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", key="send_button"):
                process_input()

        # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        st.write("")

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π" –∏ –∫–Ω–æ–ø–∫–∞ "+"
        col1, col2 = st.columns([0.9, 0.1])
        with col1:
            st.markdown("<h2 style='color: #FFFFFF;'>–°–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π</h2>", unsafe_allow_html=True)
        with col2:
            if st.button("‚ûï", key="add_vacancy_sidebar"):
                st.session_state["show_create_form"] = True

        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø—É—Å—Ç
        if not st.session_state["vacancies"]:
            st.markdown("<p class='empty-list'>–¢—É—Ç –ø–æ–∫–∞ –ø—É—Å—Ç–æ... –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–ª—é—Å–∏–∫.</p>",
                        unsafe_allow_html=True)
        else:
            for vacancy in st.session_state["vacancies"]:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª—é—á–∏ "direction", "skills" –∏ "tasks" —Å—É—â–µ—Å—Ç–≤—É—é—Ç
                if "direction" in vacancy and "skills" in vacancy and "tasks" in vacancy:
                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
                    button_text = f"{vacancy['direction']}\n–ù–∞–≤—ã–∫–∏: {vacancy['skills']}\n–ó–∞–¥–∞—á–∏: {vacancy['tasks']}"
                    if st.button(button_text, key=f"vacancy_{vacancy['id']}"):
                        st.session_state["selected_vacancy"] = vacancy
                else:
                    st.error(f"–û—à–∏–±–∫–∞: –í–∞–∫–∞–Ω—Å–∏—è —Å ID {vacancy.get('id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')} —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∞–≤–æ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
    if st.session_state["show_create_form"]:
        create_vacancy()
    elif st.session_state["selected_vacancy"]:
        show_vacancy_details(st.session_state["selected_vacancy"])
    elif st.session_state["chat_active"]:
        show_chat()
    else:
        st.markdown("""
           ## –ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å? 

           1. **–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é** –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–µ—Ç–∞–ª–∏ –∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤.
           2. **–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é**, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "+" –≤ –±–æ–∫–æ–≤–æ–º –º–µ–Ω—é.

           –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–¥–µ–π:
           - –°–ø—Ä–æ—Å–∏—Ç–µ —É –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞: *"–°–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π —Ö–æ—Ç—è—Ç –Ω–∞ —ç—Ç—É [–¥–æ–ª–∂–Ω–æ—Å—Ç—å]"*.
           - –ò–ª–∏ —Å–ø—Ä–æ—Å–∏—Ç–µ: *"–ö–∞–∫–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –ø–æ–¥—Ö–æ–¥—è—Ç –¥–ª—è [–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏]?"*
           - –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º? –°–∫–∞–∂–∏—Ç–µ: *"–ü–æ–º–æ–≥–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏"*.

           –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ü—Ä–æ—Å—Ç–æ –Ω–∞—á–Ω–∏—Ç–µ –≤–≤–æ–¥–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≥–æ–ª–æ—Å–æ–º.
           """)


def create_vacancy():
    st.subheader("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏")

    # –ü–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –ø–æ–ª—è "–û–ø—ã—Ç")
    direction = st.text_input("–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏*", placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏")
    skills = st.text_area("–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏*", placeholder="–û–ø–∏—à–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞–≤—ã–∫–∏")
    tasks = st.text_area("–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á*", placeholder="–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á–∏ –≤–∞–∫–∞–Ω—Å–∏–∏")

    # –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é"
    if st.button("–°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", key="create_vac"):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
        if not direction.strip():
            st.warning("–ü–æ–ª–µ '–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
        elif not skills.strip():
            st.warning("–ü–æ–ª–µ '–¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
        elif not tasks.strip():
            st.warning("–ü–æ–ª–µ '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–∞
            new_vacancy = {
                "direction": direction,
                "skills": skills,
                "tasks": tasks
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            try:
                response = requests.post(
                    "http://localhost:8000/vacancies/",
                    json=new_vacancy,
                    headers={"Content-Type": "application/json"}
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
                if response.status_code == 200:  # 201 - Created
                    st.success("–í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π
                    st.session_state["vacancies"] = fetch_vacancies()
                    st.session_state["show_create_form"] = False
                    st.rerun()
                else:
                    st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏: {response.status_code}")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")


def show_vacancy_details(vacancy):
    st.subheader(f"–í–∞–∫–∞–Ω—Å–∏—è: {vacancy['direction']}")
    st.write(f"**–ù–∞–≤—ã–∫–∏:** {vacancy['skills']}")
    st.write(f"**–ó–∞–¥–∞—á–∏:** {vacancy['tasks']}")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ä–µ–∑—é–º–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏
    st.subheader("–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã")
    resumes = search_resumes(vacancy)

    if not resumes:
        st.markdown("<p class='empty-list'>–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ä–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</p>", unsafe_allow_html=True)
    else:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ
        for resume_data in resumes:
            resume = resume_data["resume"]
            similarity = resume_data["similarity"]

            with st.expander(f"{resume['full_name']} - –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ: {similarity * 100:.2f}%"):
                st.write(f"**–ù–∞–≤—ã–∫–∏:** {resume['skills']}")
                st.write(f"**–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:** {resume['experience']}")


                with open(resume["pdf_filename"], "rb") as pdf_file:
                    pdf_bytes = pdf_file.read()
                    st.download_button(
                        label="üìÑ –°–∫–∞—á–∞—Ç—å —Ä–µ–∑—é–º–µ",
                        data=pdf_bytes,
                        file_name=resume["pdf_filename"].split("/")[-1],
                        mime="application/pdf"
                    )

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
    if st.button("‚Üê –ù–∞–∑–∞–¥", key="back_to_main"):
        st.session_state["selected_vacancy"] = None
        st.rerun()


def search_resumes(vacancy):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∑—é–º–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏."""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º JSON –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        search_data = {
            "direction": vacancy["direction"],
            "skills": vacancy["skills"],
            "tasks": vacancy["tasks"]
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å
        response = requests.post(
            "http://localhost:8000/search_resumes/",
            json=search_data,
            headers={"Content-Type": "application/json"}
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code == 200:
            return response.json()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—é–º–µ
        else:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ä–µ–∑—é–º–µ: {response.status_code}")
            return []
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return []


def handle_enter():
    if st.session_state["user_input"]:
        process_input()


def process_input():
    user_input = st.session_state["user_input"].strip()
    if user_input:
        st.session_state["chat_history"] = [f"### –í—ã: {user_input}", "–ú–µ—Å—Ç–æ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç –Ω–µ–π—Ä–æ–Ω–∫–∏..."]
        st.session_state["chat_active"] = True
        st.session_state["selected_vacancy"] = None  # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        st.session_state["show_create_form"] = False  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
        st.session_state["user_input"] = ""  # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞


def process_input():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞."""
    user_input = st.session_state["user_input"].strip()
    if user_input:
        # –ü–æ–ª—É—á–∞–µ–º OAuth-—Ç–æ–∫–µ–Ω –¥–ª—è GigaChat
        token = get_oauth_token(GIGACHAT_API_KEY)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–º–æ—â—å—é text_editor
        processed_text = process_text(user_input, token)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ processed_text —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º
        if isinstance(processed_text, dict):
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
            messages = [
                f"### –í–∞—à –∑–∞–ø—Ä–æ—Å: {user_input}",
                f"### –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {processed_text.get('corrected_text', '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')}",
                f"### –û—Ç–≤–µ—Ç –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞: {processed_text}"
            ]
        else:
            messages = [
                f"### –í—ã: {user_input}",
                "–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç process_text"
            ]

        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        st.session_state["chat_history"] = messages
        st.session_state["chat_active"] = True
        st.session_state["selected_vacancy"] = None  # –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        st.session_state["show_create_form"] = False  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏
        st.session_state["user_input"] = ""  # –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞


def show_chat():
    for message in st.session_state["chat_history"]:
        st.markdown(message)


def clear_main_view():
    st.session_state.update({"chat_active": False, "show_create_form": False, "selected_vacancy": None})


if __name__ == "__main__":
    main()